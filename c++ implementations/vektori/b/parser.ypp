%{
#include<iostream>
#include<vector>
#include<cstdlib>
#include<string>
#include<map>

#include"vektor.hpp"

extern int yylex();

void yyerror(const std::string& s){
	std::cout << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, Vektor*> prom;

%}


%union{
	double double_type;
	std::string* s;
	Vektor* vekt;
}

%left '+' '-'
%left '*'

%type<vekt> E
%token vector_token print_token
%token<double_type> num_token
%token<s> id_token



%%

Program
	: niz_naredbi
	;

niz_naredbi
	: niz_naredbi naredba ';'
	| 
	;

naredba
	: vector_token niz_definicija 
	| print_token E {
		std::cout << *$2 << std::endl;
	}
	;

niz_definicija
	: niz_definicija ',' definicija
	| definicija
	;

definicija
	: id_token '=' E {
		prom[*$1] = $3;
		delete $1;
	}
	| id_token {
		prom[*$1] = new Vektor();
		delete $1;
	}
	;

E
	: '[' num_token ',' num_token ']' {
		$$ = new Vektor();
		$$->dodaj($2);
		$$->dodaj($4);
	}
	;

E 
	: E '+' E {
		$$  = new Vektor(*$1 + *$3);
	}
	| E '-' E
	| num_token '*' E {
		$$ = $3;
		$$->pomnozi($1);
	}
	| id_token {
		auto finder = prom.find(*$1);
		if (finder == prom.end()){
			std::cerr << "promenljiva nije definisana" << std::endl;
			exit(EXIT_FAILURE);
		}
		$$ = new Vektor(finder->second->getvek());
	}
	;


%%

int main(){
	yyparse();
	exit(EXIT_FAILURE);
}

















