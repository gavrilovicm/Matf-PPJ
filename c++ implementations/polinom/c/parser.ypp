%{
#include<iostream>
#include<string>
#include<vector>
#include<cstdlib>
#include<map>
#include"poli.hpp"

extern int yylex();

void yyerror(std::string s){
	std::cout << "Sintaksna greska: " << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, Polinom*> prom;

%}
%union {
	double double_type;
	std::string* s;
	Polinom *p;
}
%token<double_type> broj_token
%type<p> E niz_koef
%token<s> id_token

%left '+' '-'
%left '*'
%left UNMIN

%%
/* gramatika */

Program
	: niz_naredbi
	;

niz_naredbi
	: niz_naredbi naredba '\n'
	|
	;

naredba
	: E {
		std::cout << *$1 << std::endl;
	}
	| id_token ':' '=' E {
		prom[*$1] = $4;
		delete $1;
	}
	;

E
	: '<' niz_koef '>' {
		$$ = $2;	
	}
	| E '+' E {
		$$ = new Polinom(*$1 + *$3);
	}
	| E '-' E {
		$$ = new Polinom(*$1 - *$3);
	}
	| E '*' E {
		$$ = new Polinom((*$1) * (*$3));
	}
	| '-' E %prec UNMIN {
		$2->promeni_znak();
		$$ = $2;
	}
	| '(' E ')' {
		$$ = $2;
	}
	| id_token {
		auto finder = prom.find(*$1);
		if (finder != prom.end()){
			$$ = new Polinom(finder->second->coefs());
		}else{
			std::cerr << "Ne postoji promenljiva " << *$1 << std::endl;
		}
		delete $1;
	}
	;

niz_koef 
	: niz_koef ',' broj_token{
		$1->dodaj_koef($3);
		$$ = $1;
	}
	| broj_token {
		$$ = new Polinom();
		$$->dodaj_koef($1);
	}
	;



%%

int main(){
	yyparse();
	exit(EXIT_FAILURE);
}
