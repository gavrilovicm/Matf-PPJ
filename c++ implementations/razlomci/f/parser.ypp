%{
#include<iostream>
#include<vector>
#include<string>
#include<map>

#include"razlomak.hpp"

extern int yylex();

void yyerror(std::string s){
	std::cout << "Sintaksna greska: " << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, Razlomak*> promenljiva;

%}

%token print_tok nom_tok den_tok double_tok eq_tok
%token<i> num_tok
%token<s> id_tok
%type<r> E

%left '+' '-'
%left '*' '/'

%union{
	int i;
	Razlomak* r;
	std::string* s;
}

%%

Program
	: niz_linija
	;
niz_linija
	: niz_linija linija
	|
	;

linija
	: E '\n' {
		delete $1;
	}
	| print_tok '(' E ')' '\n' {
		std::cout << *$3;
		delete $3;
	}
	| nom_tok '(' E ')' '\n' {
		std::cout << $3->nom() << std::endl;
		delete $3;
	}
	| den_tok '(' E ')' '\n' {
		std::cout << $3->den() << std::endl;
		delete $3;
	}
	| id_tok '=' E '\n'{
		promenljiva[*$1] = $3;
		delete $1;
	}
	| double_tok '(' E ')' '\n' {
		std::cout << (double)($3->getBrojilac()) / $3->getImenilac() << std::endl;
		delete $3;
	}
	| eq_tok '(' E ',' E ')' '\n' {
		if (*$3 == *$5)
			std::cout << "True" << std::endl;
		else
			std::cout << "False" << std::endl;
	}
	;

E
	: '[' num_tok ',' num_tok ']' {
		$$ = new Razlomak($2, $4);
	}
	| '[' num_tok ']' {
		$$ = new Razlomak($2, 1);
	}
	| E '+' E {
		$$ = *$1 + *$3;
		delete $1;
		delete $3;
	}
	| E '-' E{
		$$ = *$1 - *$3;
		delete $1;
		delete $3;
	}
	| E '*' E {
		$$ = *$1 * *$3;
		delete $1;
		delete $3;
	}
	| E '/' E {
		$$ = *$1 / *$3;
		delete $1;
		delete $3;
	}
	| '(' E ')'{
		$$ = $2;
	}
	| id_tok {
		auto finder = promenljiva.find(*$1);
		if (finder == promenljiva.end()){
			std::cerr << "Promenljiva " << *$1 << " nije definisana." << std::endl;
			exit(EXIT_FAILURE);
		}else{
			$$ = new Razlomak(*finder->second);
		}
		delete $1;
	}
	;

%%

int main(){
	yyparse();
	exit(EXIT_SUCCESS);
}
