%{
#include<iostream>
#include<string>
#include<cstdlib>
#include<vector>
#include<map>

extern int yylex();

void yyerror(const std::string& s){
	std::cout << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, std::string> prom;


%}
%union {
	std::string* s;
	int i;
}

%token string_token reverse_token length_token print_token sort_token substring_token upper_token lower_token concat_token eq_token 
%token<s> id_token value_token
%token<i> num_token
%type<s> E


%left '+' 
%left '*'


%%

Program
	: niz_naredbi
	;

niz_naredbi
	: niz_naredbi naredba
	| naredba
	;
naredba
	: string_token id_token '=' E ';' {
		auto finder = prom.find(*$2);
		if (finder == prom.end()) {
			prom[*$2] = *$4;
			delete $2;
			delete $4;
		}else{
			std::cout << "Promenljiva je vec definisana" << std::endl;
			exit(EXIT_FAILURE);
		}

	}
	| print_token '(' E ')' ';' {
		std::cout << *$3 << std::endl;	
	}
	| string_token id_token ';' {
		prom[*$2] = *(new std::string());
	}
	| id_token concat_token E ';' {

		auto finder = prom.find(*$1);
		if (finder == prom.end()) {
			std::cout << "Promenljiva\"" << *$1 << "\" nije definisana.." << std::endl;
			exit(EXIT_FAILURE);
		}else{
			std::string s = prom[*$1];
			prom[*$1] = prom[*$1] + *$3;
			delete $1;
			delete $3;
		}

	}
	| E eq_token E ';' {
		std::cout << ((*$1 == *$3) ? "True":"False") << std::endl;
	}
	| id_token '=' E ';' {
		auto finder = prom.find(*$1);
		if (finder == prom.end()) {
			std::cout << "Promenljiva\"" << *$1 << "\" nije definisana.." << std::endl;
			exit(EXIT_FAILURE);
		}else{
			prom[*$1] = *$3;
			delete $1;
			delete $3;
		}
	}
	| reverse_token '(' id_token ')' ';' {
		std::string s = prom[*$3];
		unsigned n = s.length();
		for (unsigned i=0; i<n/2; i++){
			std::swap(s[i], s[n-i-1]);
		}
		prom[*$3] = s;
	}
	| length_token '(' E ')' ';' {
		std::cout << $3->length() << std::endl;
		delete $3;
	}
	| upper_token '(' id_token ')' ';' {
		std::string s = prom[*$3];
		for (unsigned i=0; i<s.length(); i++){
			s[i] = toupper(s[i]);
		}
		prom[*$3] = s;
	}
	| lower_token '(' id_token ')' ';' {
		std::string s = prom[*$3];
		for (unsigned i=0; i<s.length(); i++){
			s[i] = tolower(s[i]);
		}
		prom[*$3] = s;
	}
	| sort_token '(' id_token ')' ';' {
		std::string s = prom[*$3];
		int n = s.length();
		for (int i=0; i<n-1; i++)
			for (int j=i; j<n; j++){
				if (s[i] > s[j]){
					std::swap(s[i], s[j]);
				}
			}
		prom[*$3] = s;
		
	}
	| substring_token '(' E ',' E ')' ';' {
		std::cout << ((*$3).find((*$5)) ? "False": "True") << std::endl;
	}
	; 

E
	: E '+' E {
		std::string s;
		s = *$1 + *$3;
		$$ = new std::string(s);
	}
	| E '*' num_token {
		std::string s = *$1;
		std::string su;
		for (int i = 0; i< $3; i++){
			su = su + s;
		}
		$$ = new std::string(su);
	}
	| id_token '[' num_token ',' num_token ']' {
		std::string s = prom[*$1].substr($3, $5);
		$$ = new std::string(s);
		delete $1;
	}
	| value_token {
		$$ = new std::string(*$1);
		delete $1;
	}
	| id_token {
		auto finder = prom.find(*$1);
		if (finder == prom.end()) {
			std::cout << "Promenljiva\"" << *$1 << "\" nije definisana.." << std::endl;
			exit(EXIT_FAILURE);
		}else{
			$$ = new std::string(prom[*$1]);
		}
	}
	;

%%
int main(){
	yyparse();
	exit(EXIT_SUCCESS);
}
















