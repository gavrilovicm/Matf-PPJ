%{
#include<iostream>
#include<string>
#include<vector>
#include<map>
#include"mat.hpp"

extern int yylex();

void yyerror(std::string s){
	std::cerr << "Greska." << std::endl;
	exit(EXIT_FAILURE);
}

std::map<char, Matrica*> prom;

%}

%token disp_tok size_tok pokoordinatno_sabiranje_tok pokoordinatno_mnozenje_tok transp_tok
%token<i> num_tok
%token<c> id_tok
%type<m> E niz_vrsta
%type<vi> vrsta niz_brojeva

%left pokoordinatno_sabiranje_tok
%left pokoordinatno_mnozenje_tok '*'
%left transp_tok

%union{
	int i;
	Matrica* m;
	std::vector<int>* vi;
	char c;
}

%%

Program
	: niz_linija
	;

niz_linija
	: niz_linija linija
	| linija
	;

linija
	: disp_tok '(' E ')' '\n' {
		std::cout << *$3;
	}
	| size_tok '(' E ')' '\n' {
		$3->velicina();
	}
	| id_tok '=' E '\n' {
		prom[$1] = $3;
	}
	;

E
	: '[' niz_vrsta ']' {
		$$ = $2;
	}
	| id_tok {
		auto finder = prom.find($1);
		if (finder == prom.end()){
			std::cerr << "Promenljiva: " << $1 << " nije definisana." << std::endl;
			exit(EXIT_FAILURE);
		}else{
			$$ = prom[$1];
		}
	}
	| E pokoordinatno_mnozenje_tok E {
		if ($1->getMatrica().size() != $3->getMatrica().size()){
			std::cout << "Dimenzije se ne poklapaju" << std::endl;
		}else{
			std::vector<std::vector<int>> m1 = $1->getMatrica();
			std::vector<std::vector<int>> m2 = $3->getMatrica();
			if (m1[0].size() != m2[0].size()){
				std::cout << "Dimenzije se ne poklapaju" << std::endl;
			}else{
				$$ = Matrica::pomnozi(*$1, *$3);
			}
		}
	}
	| E pokoordinatno_sabiranje_tok E {
		if ($1->getMatrica().size() != $3->getMatrica().size()){
			std::cout << "Dimenzije se ne poklapaju" << std::endl;
		}else{
			std::vector<std::vector<int>> m1 = $1->getMatrica();
			std::vector<std::vector<int>> m2 = $3->getMatrica();
			if (m1[0].size() != m2[0].size()){
				std::cout << "Dimenzije se ne poklapaju" << std::endl;
			}else{
				$$ = Matrica::saberi(*$1, *$3);
			}
		}
	}
	| E '*' E {
		if ($1->getMatrica()[0].size() != $3->getMatrica().size()){
			std::cerr << "Ne poklapaju se dimenzije matrice" << std::endl;
			exit(EXIT_FAILURE);
		}else{
			$$ = $1->pomnozi1(*$3);
		}
	}
	| E transp_tok {
		$$ = $1->transponuj();
	}
	;

niz_vrsta
	: niz_vrsta ';' vrsta {
		$1->dodaj_vrstu(*$3);
		delete $3;
	}
	| vrsta {
		Matrica* niz = new Matrica();
		niz->dodaj_vrstu(*$1);
		$$ = niz;
		delete $1;
	}
	;

vrsta
	: '[' niz_brojeva ']' {
		$$ = $2;
	}
	;

niz_brojeva
	: niz_brojeva ',' num_tok {
		$$->push_back($3);
	}
	| num_tok {
		std::vector<int>* niz = new std::vector<int>();
		niz->push_back($1);
		$$ = niz;
	}
	;

%%

int main(){
	yyparse();
	exit(EXIT_SUCCESS);
}
